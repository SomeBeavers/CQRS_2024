@page "/animals"
@using MediatR
@using Microsoft.AspNetCore.Mvc
@using QueryCommandHandler_Web.Command
@using QueryCommandHandler_Web.CommandModels
@using QueryCommandHandler_Web.Query
@using QueryCommandHandler_Web.QueryModels
@inject IMediator Mediator
@* @inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf *@

@attribute [StreamRendering]

<PageTitle>Animals</PageTitle>

<h1>Animal</h1>

@if (animals == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
 
            </tr>
        </thead>
        <tbody>
            @foreach (var model in animals)
            {
                <tr>
                <td>@model.Id</td>
                <td>@model.Name</td>
 
                </tr>
     }
        </tbody>
    </table>
}
<!-- Add Animal Form -->
<form method="post" @onsubmit="AddAnimal">
@* 	<input type="hidden" name="__RequestVerificationToken" value="@Xsrf.GetAndStoreTokens(new DefaultHttpContext()).RequestToken" /> *@
	<input type="text" @bind="newAnimal.Name" placeholder="Animal Name"/>
	<button type="submit">Add Animal</button>
</form>

@code {
    AnimalQueryModel[] animals;
    AnimalCommandModel newAnimal = new();

    protected override async Task OnInitializedAsync()
    {
        animals = await Mediator.Send(new GetAnimalsQuery());
    }

    private async Task<int> AddAnimal()
    {
	    return await Mediator.Send(new AddAnimalCommand(newAnimal));
    }
}